——————————————————————————————————————————————————————————————————————————————
🧱 1. CLASSES 
——————————————————————————————————————————————————————————————————————————————

📌 What is a class?
- A class is a blueprint for creating objects.
- It defines what properties (fields) and behaviors (methods) an object will have.
- In Java, everything revolves around classes.

🔧 How i used classes in this project:

——————————————————————————————————————————————————————————————————————————————
🟥 Cardinal class
——————————————————————————————————————————————————————————————————————————————
Purpose: Represents each individual cardinal.

Fields (data):
- String name → the cardinal’s full title (e.g., "Cardinal Francesco of Genoa")
- int age → age of the cardinal
- int influence → a number representing the cardinal’s influence in voting
- boolean canVote → whether the cardinal is eligible to vote

Possible methods (behavior):
- Getters to access the data (getName(), getAge(), etc.)
- toString() to print details (optional)

🛠 I create many Cardinal objects using this class template.

——————————————————————————————————————————————————————————————————————————————
🟦 ConclaveRoom class
——————————————————————————————————————————————————————————————————————————————
Purpose: Controls the simulation of the papal conclave.

Fields:
- List<Cardinal> cardinals → list of all cardinals involved in voting

Methods:
- runElection() → runs voting rounds until one cardinal is chosen
- voteRound() → (optional) simulates a single round of voting
- countVotes() → (optional) counts votes and checks for majority

🛠 This class contains most of the logic for the project.

——————————————————————————————————————————————————————————————————————————————
🟩 Main class
——————————————————————————————————————————————————————————————————————————————
Purpose: This is where your Java program starts.

Tasks:
- Asks user for input (names of cardinals)
- Generates random age, influence, and city for each cardinal
- Creates Cardinal objects and adds them to the list
- Starts the simulation by calling ConclaveRoom.runElection()

It contains the special method:
public static void main(String[] args) { ... }

📌 This method is the entry point for your program — Java runs it first.

——————————————————————————————————————————————————————————————————————————————
📦 Summary of Class Roles:
——————————————————————————————————————————————————————————————————————————————
- Cardinal → Data model (blueprint for each cardinal)
- ConclaveRoom → Logic controller (runs the simulation)
- Main → App runner (gets input and launches simulation)

✅ This is a great use of object-oriented design:
- Clear separation of roles
- Organized code
- Easy to expand later (add more logic or new features)

——————————————————————————————————————————————————————————————————————————————
🧍‍♂️ 2. OBJECTS (Instances)
——————————————————————————————————————————————————————————————————————————————

📌 What is an Object?
An object is a real example of a class.
If a class is the blueprint, then an object is the thing built from it.

💡 Think of a class as a recipe (Cardinal),
and each object is a unique dish made from it (like "Francesco", "Giovanni").

✅ In this project:
We use the 'Cardinal' class to create different cardinals.

Example:
    Cardinal francesco = new Cardinal("Francesco", 70, 8, true);

This means:
- francesco is an object (or instance) of the Cardinal class
- He has his own name, age, influence score, and voting ability

We create many objects and store them in a list:
    ArrayList<Cardinal> cardinals = new ArrayList<>();
    cardinals.add(new Cardinal("Mateo", 70, 8, true));
    cardinals.add(new Cardinal("Giovanni", 68, 6, true));
    cardinals.add(new Cardinal("Luis", 73, 7, true));
    ...

Each line creates a new, unique object.

——————————————————————————————————————————————————————————————————————————————
📦 Summary
——————————————————————————————————————————————————————————————————————————————
- Object = a real instance of a class (like 1 cardinal)
- Each object has its own values for the class’s variables
- All objects share the same structure, but have different data
- We can store and manage them easily in an ArrayList

——————————————————————————————————————————————————————————————————————————————
🔐 3. ENCAPSULATION & Getters / Setters
——————————————————————————————————————————————————————————————————————————————

📌 What is encapsulation?

Encapsulation means keeping the internal details (data) of a class hidden from the outside world and only exposing a controlled way to access or modify that data.

You do this by:
	•	Making the fields (variables) private
	•	Providing public methods to get or change those fields safely

——————————————————————————————————————————————————————————————————————————————

Why use getters and setters?
	•	To protect data from being changed randomly or incorrectly
	•	To control access (for example, you can validate input inside setters)
	•	To hide implementation details (you can change internal logic without changing how others use the class)

——————————————————————————————————————————————————————————————————————————————
How do getters and setters look?
——————————————————————————————————————————————————————————————————————————————
Suppose your Cardinal class has a private field:

private String name;

You write a getter to read the name:

public String getName() {
    return name;
}

You write a setter to change the name:

public void setName(String name) {
    this.name = name;
}
——————————————————————————————————————————————————————————————————————————————
Example in your Cardinal class:
——————————————————————————————————————————————————————————————————————————————

public class Cardinal {
    private String name;
    private int age;
    private int influence;
    private boolean canVote;

    // Constructor
    public Cardinal(String name, int age, int influence, boolean canVote) {
        this.name = name;
        this.age = age;
        this.influence = influence;
        this.canVote = canVote;
    }

    // Getter for name
    public String getName() {
        return name;
    }

    // Setter for name (optional)
    public void setName(String name) {
        this.name = name;
    }

    // Getter for age
    public int getAge() {
        return age;
    }

    // Setter for age
    public void setAge(int age) {
        if (age >= 0) {  // example validation
            this.age = age;
        }
    }

    // Similarly for influence and canVote
    public int getInfluence() {
        return influence;
    }

    public void setInfluence(int influence) {
        if (influence >= 0) {
            this.influence = influence;
        }
    }

    public boolean canVote() {
        return canVote;
    }

    public void setCanVote(boolean canVote) {
        this.canVote = canVote;
    }
}

——————————————————————————————————————————————————————————————————————————————
How to use them?
——————————————————————————————————————————————————————————————————————————————

Cardinal c = new Cardinal("Francesco", 70, 8, true);

// Read name safely
System.out.println("Name: " + c.getName());

// Change influence safely
c.setInfluence(9);

——————————————————————————————————————————————————————————————————————————————
Why is this better than public fields?
——————————————————————————————————————————————————————————————————————————————
If fields were public:

public String name;

Anyone could do:

c.name = null;  // or garbage data

With getters/setters, you can control what is allowed.



——————————————————————————————————————————————————————————————————————————————
🎭 4. ABSTRACTION
——————————————————————————————————————————————————————————————————————————————

📌 What is Abstraction?

Abstraction means hiding the complex details of how something works and only showing the important parts that the user needs to interact with.

It’s like when you drive a car:
You don’t need to know how the engine works inside, you just use the steering wheel and pedals to drive.

——————————————————————————————————————————————————————————————————————————————
✅ How do you use abstraction in your project?
——————————————————————————————————————————————————————————————————————————————

You have a class ConclaveRoom which hides the complicated voting logic inside a simple method:

conclave.runElection();

	•	You don’t worry about how the votes are counted, or how the winner is chosen.
	•	You just call runElection(), and the process happens inside the class.

This is abstraction — the complex inner work is hidden behind a simple interface.

——————————————————————————————————————————————————————————————————————————————
📌 Why is abstraction useful?
	•	It makes your code easier to use and understand because the user sees only what’s necessary.
	•	It helps protect the code from mistakes because the inner logic is hidden.
	•	It makes maintenance easier — you can change the inner workings without changing the way other parts use it.

——————————————————————————————————————————————————————————————————————————————
Example:

public class ConclaveRoom {
    private List<Cardinal> cardinals;

    public ConclaveRoom(List<Cardinal> cardinals) {
        this.cardinals = cardinals;
    }

    // This method hides all the voting details inside
    public void runElection() {
        // complex voting process here
        // ...
        System.out.println("Pope elected!");
    }
}

You just call:

conclave.runElection();

And you get the result — you don’t need to understand or see the internal voting steps.


——————————————————————————————————————————————————————————————————————————————
5️⃣ INHERITANCE
——————————————————————————————————————————————————————————————————————————————

What is inheritance?

Inheritance lets you create a new class based on an existing class, inheriting its fields and methods — so you reuse code and add or change features.

Think of it like a child inheriting traits from a parent.

——————————————————————————————————————————————————————————————————————————————
How could it work in your project?
——————————————————————————————————————————————————————————————————————————————

Suppose you want to create different types of Cardinals:
	•	SeniorCardinal — older, more experienced, maybe more influence
	•	JuniorCardinal — younger, less influence

You can make a base class Cardinal and then create:

public class SeniorCardinal extends Cardinal {
    // extra fields or methods for seniors
}

public class JuniorCardinal extends Cardinal {
    // extra fields or methods for juniors
}

They inherit all Cardinal properties but can have special behavior.


Benefits
	•	Avoid repeating code
	•	Organize related classes in a hierarchy
	•	Easily extend or customize functionality

——————————————————————————————————————————————————————————————————————————————
6️⃣ POLYMORPHISM
——————————————————————————————————————————————————————————————————————————————

What is polymorphism?

Polymorphism means “many forms.” It allows objects of different classes to be treated as objects of a common superclass, but each can behave differently when methods are called.

——————————————————————————————————————————————————————————————————————————————
In your project
——————————————————————————————————————————————————————————————————————————————

If you have subclasses like SeniorCardinal and JuniorCardinal, you can treat them both as Cardinal:

ArrayList<Cardinal> cardinals = new ArrayList<>();
cardinals.add(new SeniorCardinal(...));
cardinals.add(new JuniorCardinal(...));

When you call a method like vote() on each, the specific implementation in the subclass will run:

for (Cardinal c : cardinals) {
    c.vote();
}

Each cardinal votes differently based on their class.

——————————————————————————————————————————————————————————————————————————————
Benefits
——————————————————————————————————————————————————————————————————————————————
	•	Write flexible and extensible code
	•	Use the same interface for different behaviors
	•	Easily add new types without changing existing code


——————————————————————————————————————————————————————————————————————————————
✅ What is a Static Method?
——————————————————————————————————————————————————————————————————————————————

A static method belongs to the class itself, not to any specific object.
You can call it without creating an object of the class.

🔧 Example from your code:

public static void main(String[] args) {
    // ...
}

main() is static because the Java Virtual Machine (JVM) calls it without creating an object of your class.

——————————————————————————————————————————————————————————————————————————————
📣 How to explain it in your presentation:

“A static method belongs to the class and can be called without creating an object. For example, main() is static so the program can run without needing to instantiate anything.”
——————————————————————————————————————————————————————————————————————————————

🚫 What is a Non-Static Method?

A non-static method (also called an instance method) belongs to an object.
To use it, you must create an object of the class first.

🔧 Example from your code:

Cardinal c1 = new Cardinal("John", 75, "Italy");
c1.getAge(); // getAge() is non-static

getAge() is non-static because it works on a specific cardinal object. You must create a Cardinal before calling it.

——————————————————————————————————————————————————————————————————————————————
📣 How to explain it:

“A non-static method is tied to an object and needs an object to be used. For example, to get a cardinal’s age, I need to create a Cardinal object and then call getAge() on it.”
——————————————————————————————————————————————————————————————————————————————

🧠 When to use Static vs Non-Static?

Use Static When…			Use Non-Static When…
The method doesn’t need object data	The method uses or changes object state
You want to run something globally	You are working with specific objects


⸻

🧪 Quick Test Question (just in case):

Q: Can you call a non-static method from a static method?
A: Not directly. You need to create an object first and then call the method.

Great choice, Nur! Real-world analogies make it much easier to remember and explain concepts clearly — especially during an exam or presentation.

⸻

🏠 Real-World Analogy: Class, Static, and Non-Static Methods

👷 Imagine a class as a blueprint for building houses.
	•	The class is the blueprint (e.g., Cardinal).
	•	The object is an actual house built from that blueprint (e.g., c1 = new Cardinal()).

⸻

🛠️ Static Method = Instructions that belong to the blueprint itself

Let’s say there’s a static method like:

public static void printWelcomeMessage() {
    System.out.println("Welcome to the Conclave!");
}

This is like a general instruction written on the blueprint, saying:

“Every house should have a welcome mat.”

You don’t need to build a house to read this instruction — it’s on the plan.

✅ You can access it without creating any house.

⸻

🚪 Non-Static Method = Actions for a specific house

Now imagine a non-static method like:

public int getAge() {
    return this.age;
}

This is like asking:

“What color is the door of this specific house?”

You can’t answer that by just looking at the blueprint — you need to go to a real house and check.

✅ You need to build a house (create an object) before asking it.

⸻

🧠 Final Summary

Concept			Real-World Analogy		Java Example
Class			Blueprint			Cardinal class
Object			Actual house			Cardinal c1 = new Cardinal(...)
Static Method		General rule on the blueprint	main() or printWelcomeMessage()
Non-Static Method	House-specific feature		c1.getAge()


Excellent follow-up, Nur! Let me explain that clearly:

⸻

🔧 What is a Blueprint?

A blueprint is a detailed plan or design used to build something — like a house.

It doesn’t build the house itself, but it tells you:
	•	how many rooms there will be
	•	where the doors go
	•	what size the windows are
	•	etc.

In programming terms:

⸻

💻 In Java:
	•	A class is like the blueprint.
	•	It defines what an object will be like — what data it has (fields) and what it can do (methods).
	•	But on its own, a class does nothing until you build an object from it.

⸻

🧱 Real Example from Your Project:

public class Cardinal {
    private String name;
    private int age;
    private String country;
    
    public Cardinal(String name, int age, String country) {
        this.name = name;
        this.age = age;
        this.country = country;
    }

    public int getAge() {
        return age;
    }
}

This Cardinal class is your blueprint.

It says:
	•	Every cardinal has a name, age, and country.
	•	You can get their age using getAge().

But this class alone doesn’t create a cardinal.
You have to use it like this:

Cardinal c1 = new Cardinal("John", 75, "Italy");

Now, you’ve built an actual object (a real “house”) based on the blueprint.

⸻

🧠 Simple Analogy Summary:

Concept		Real World		Java Equivalent
Blueprint	House design		Class (e.g., Cardinal)
Actual house	Built from blueprint	Object (e.g., c1)




